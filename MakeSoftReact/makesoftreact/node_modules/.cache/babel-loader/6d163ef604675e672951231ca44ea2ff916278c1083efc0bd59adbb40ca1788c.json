{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ozmar\\\\OneDrive\\\\Documents\\\\GitHub\\\\MakeSoft-SOEN341_Project_F24\\\\MakeSoftReact\\\\makesoftreact\\\\src\\\\instructorPage.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { Form, Button, Message, List } from 'semantic-ui-react';\n\n// const InstructorPage = () => {\n//   const [teamName, setTeamName] = useState('');\n//   const [section, setSection] = useState('');\n//   const [studentIds, setStudentIds] = useState('');\n//   const [message, setMessage] = useState('');\n//   const [students, setStudents] = useState([]); // Changed from teams to students for clarity\n\n//   // Function to create a team\n//   const createTeam = async () => {\n//     try {\n//       const response = await axios.post('http://localhost:8080/api/teams/create', {\n//         teamName,\n//         section,\n//         studentIds: studentIds.split(','), // Split by comma for multiple students\n//       });\n//       setMessage(response.data);\n//       fetchStudentsBySection(section); // Refresh students list\n//     } catch (error) {\n//       console.error(error);\n//       setMessage('Failed to create team.');\n//     }\n//   };\n\n//   // Function to fetch students by section\n//   const fetchStudentsBySection = async (section) => {\n//     try {\n//       // Make a request to the backend to get the list of students by section\n//       const response = await axios.get(`http://localhost:8080/api/instructors/${section}/students`);\n\n//       // Assuming the response data contains the list of students\n//       setStudents(response.data); // Changed from setTeams to setStudents\n//     } catch (error) {\n//       console.error('Error fetching students by section:', error);\n//     }\n//   };\n\n//   useEffect(() => {\n//     if (section) {\n//       fetchStudentsBySection(section);\n//     }\n//   }, [section]);\n\n//   return (\n//     <div>\n//       <h1>Instructor Page</h1>\n//       <Form>\n//         <Form.Field>\n//           <label>Team Name</label>\n//           <input placeholder=\"Enter Team Name\" value={teamName} onChange={(e) => setTeamName(e.target.value)} />\n//         </Form.Field>\n//         <Form.Field>\n//           <label>Section</label>\n//           <input placeholder=\"Enter Section\" value={section} onChange={(e) => setSection(e.target.value)} />\n//         </Form.Field>\n//         <Form.Field>\n//           <label>Student IDs (comma separated)</label>\n//           <input placeholder=\"Enter Student IDs\" value={studentIds} onChange={(e) => setStudentIds(e.target.value)} />\n//         </Form.Field>\n//         <Button onClick={createTeam}>Create Team</Button>\n//       </Form>\n\n//       {message && <Message content={message} />}\n\n//       <h1>Students in Section {section}</h1>\n//       <ul>\n//         {students.map((student, index) => (\n//           <li key={index}>\n//             {student.name} - {student.email} - Team {student.team}\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const InstructorPage = () => {\n//   const [section, setSection] = useState('');  // Section input state\n//   const [students, setStudents] = useState([]);\n\n//   // Fetch students for the entered section\n//   const fetchStudents = async (section) => {\n//     try {\n//       const response = await axios.get(`http://localhost:8080/api/instructors/${section}/students`);\n//       setStudents(response.data);\n//     } catch (error) {\n//       console.error('Error fetching students:', error);\n//     }\n//   };\n\n//   const handleSectionChange = (e) => {\n//     const newSection = e.target.value; // Store the new section value first\n//     setSection(newSection); // Update the section state\n\n//     // Fetch students whenever the section changes\n//     if (newSection) {\n//       fetchStudents(newSection); // Fetch students with the updated section value\n//     }\n//   };\n\n//   const handleFetchStudents = () => {\n//     if (section) {\n//       fetchStudents(section);  // Fetch students when button is clicked\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>Instructor Page</h1>\n\n//       <label>Enter Section:</label>\n//       <input\n//         type=\"text\"\n//         value={section}\n//         onChange={handleSectionChange}\n//         placeholder=\"Type section\"\n//       />\n//       <button onClick={handleFetchStudents}>Fetch Students</button>\n\n//       <h2>Students in Section {section}</h2>\n//       <ul>\n//         {students.length > 0 ? (\n//           students.map((student, index) => (\n//             <li key={index}>\n//               {student.studentId} - {student.name} - {student.email} - Team {student.team}\n//             </li>\n//           ))\n//         ) : (\n//           <li>No students found for this section.</li>\n//         )}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default InstructorPage;\n\n// InstructorPage.js\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Form, Button, Message, Dropdown } from 'semantic-ui-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InstructorPage = ({\n  instructor\n}) => {\n  _s();\n  // Move all Hook calls to the top level\n  const [students, setStudents] = useState([]);\n  const [teams, setTeams] = useState([]);\n  const [selectedStudents, setSelectedStudents] = useState([]);\n  const [teamName, setTeamName] = useState('');\n  const [message, setMessage] = useState('');\n\n  // Update useEffect to check for instructor\n  useEffect(() => {\n    if (instructor) {\n      fetchStudents();\n      fetchTeams();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [instructor]);\n  const fetchStudents = async () => {\n    try {\n      const response = await axios.get(`http://localhost:8080/api/instructors/${instructor.section}/students`);\n      setStudents(response.data);\n    } catch (error) {\n      console.error('Error fetching students:', error);\n    }\n  };\n  const fetchTeams = async () => {\n    try {\n      const response = await axios.get(`http://localhost:8080/api/instructors/${instructor.section}/teams`);\n      setTeams(response.data);\n    } catch (error) {\n      console.error('Error fetching teams:', error);\n    }\n  };\n  const handleAddTeam = async () => {\n    if (!teamName || selectedStudents.length === 0) {\n      setMessage('Please enter a team name and select students.');\n      return;\n    }\n    const team = {\n      teamName,\n      section: instructor.section,\n      studentIds: selectedStudents\n    };\n    try {\n      const response = await axios.post(`http://localhost:8080/api/instructors/${instructor.section}/teams`, team);\n      setMessage(response.data);\n      setTeamName('');\n      setSelectedStudents([]);\n      fetchTeams();\n    } catch (error) {\n      console.error('Error adding team:', error);\n      setMessage('Failed to add team.');\n    }\n  };\n\n  // Move the conditional return AFTER the Hooks\n  if (!instructor) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No instructor data available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Prepare student options for the dropdown\n  const studentOptions = students.map(student => ({\n    key: student.studentId,\n    text: `${student.name} (${student.studentId})`,\n    value: student.studentId\n  }));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Welcome, \", instructor.name, \"!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Section: \", instructor.section]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Add a Team\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      children: [/*#__PURE__*/_jsxDEV(Form.Field, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Team Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: \"Enter Team Name\",\n          value: teamName,\n          onChange: e => setTeamName(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Select Students\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n          placeholder: \"Select Students\",\n          fluid: true,\n          multiple: true,\n          selection: true,\n          options: studentOptions,\n          value: selectedStudents,\n          onChange: (e, {\n            value\n          }) => setSelectedStudents(value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleAddTeam,\n        children: \"Add Team\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(Message, {\n      content: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Teams\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: teams.map((team, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: team.teamName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 13\n        }, this), \": \", team.studentIds.join(', ')]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"All Students in Section \", instructor.section]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: students.map((student, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [student.studentId, \" - \", student.name, \" - \", student.email]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 231,\n    columnNumber: 5\n  }, this);\n};\n_s(InstructorPage, \"3bSW+mT3fLhitO+v4XYly98KtiE=\");\n_c = InstructorPage;\nexport default InstructorPage;\nvar _c;\n$RefreshReg$(_c, \"InstructorPage\");","map":{"version":3,"names":["React","useState","useEffect","axios","Form","Button","Message","Dropdown","jsxDEV","_jsxDEV","InstructorPage","instructor","_s","students","setStudents","teams","setTeams","selectedStudents","setSelectedStudents","teamName","setTeamName","message","setMessage","fetchStudents","fetchTeams","response","get","section","data","error","console","handleAddTeam","length","team","studentIds","post","children","fileName","_jsxFileName","lineNumber","columnNumber","studentOptions","map","student","key","studentId","text","name","value","Field","placeholder","onChange","e","target","fluid","multiple","selection","options","onClick","content","index","join","email","_c","$RefreshReg$"],"sources":["C:/Users/ozmar/OneDrive/Documents/GitHub/MakeSoft-SOEN341_Project_F24/MakeSoftReact/makesoftreact/src/instructorPage.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import { Form, Button, Message, List } from 'semantic-ui-react';\r\n\r\n// const InstructorPage = () => {\r\n//   const [teamName, setTeamName] = useState('');\r\n//   const [section, setSection] = useState('');\r\n//   const [studentIds, setStudentIds] = useState('');\r\n//   const [message, setMessage] = useState('');\r\n//   const [students, setStudents] = useState([]); // Changed from teams to students for clarity\r\n\r\n//   // Function to create a team\r\n//   const createTeam = async () => {\r\n//     try {\r\n//       const response = await axios.post('http://localhost:8080/api/teams/create', {\r\n//         teamName,\r\n//         section,\r\n//         studentIds: studentIds.split(','), // Split by comma for multiple students\r\n//       });\r\n//       setMessage(response.data);\r\n//       fetchStudentsBySection(section); // Refresh students list\r\n//     } catch (error) {\r\n//       console.error(error);\r\n//       setMessage('Failed to create team.');\r\n//     }\r\n//   };\r\n\r\n//   // Function to fetch students by section\r\n//   const fetchStudentsBySection = async (section) => {\r\n//     try {\r\n//       // Make a request to the backend to get the list of students by section\r\n//       const response = await axios.get(`http://localhost:8080/api/instructors/${section}/students`);\r\n      \r\n//       // Assuming the response data contains the list of students\r\n//       setStudents(response.data); // Changed from setTeams to setStudents\r\n//     } catch (error) {\r\n//       console.error('Error fetching students by section:', error);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     if (section) {\r\n//       fetchStudentsBySection(section);\r\n//     }\r\n//   }, [section]);\r\n\r\n//   return (\r\n//     <div>\r\n//       <h1>Instructor Page</h1>\r\n//       <Form>\r\n//         <Form.Field>\r\n//           <label>Team Name</label>\r\n//           <input placeholder=\"Enter Team Name\" value={teamName} onChange={(e) => setTeamName(e.target.value)} />\r\n//         </Form.Field>\r\n//         <Form.Field>\r\n//           <label>Section</label>\r\n//           <input placeholder=\"Enter Section\" value={section} onChange={(e) => setSection(e.target.value)} />\r\n//         </Form.Field>\r\n//         <Form.Field>\r\n//           <label>Student IDs (comma separated)</label>\r\n//           <input placeholder=\"Enter Student IDs\" value={studentIds} onChange={(e) => setStudentIds(e.target.value)} />\r\n//         </Form.Field>\r\n//         <Button onClick={createTeam}>Create Team</Button>\r\n//       </Form>\r\n\r\n//       {message && <Message content={message} />}\r\n\r\n//       <h1>Students in Section {section}</h1>\r\n//       <ul>\r\n//         {students.map((student, index) => (\r\n//           <li key={index}>\r\n//             {student.name} - {student.email} - Team {student.team}\r\n//           </li>\r\n//         ))}\r\n//       </ul>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n\r\n// const InstructorPage = () => {\r\n//   const [section, setSection] = useState('');  // Section input state\r\n//   const [students, setStudents] = useState([]);\r\n\r\n//   // Fetch students for the entered section\r\n//   const fetchStudents = async (section) => {\r\n//     try {\r\n//       const response = await axios.get(`http://localhost:8080/api/instructors/${section}/students`);\r\n//       setStudents(response.data);\r\n//     } catch (error) {\r\n//       console.error('Error fetching students:', error);\r\n//     }\r\n//   };\r\n\r\n//   const handleSectionChange = (e) => {\r\n//     const newSection = e.target.value; // Store the new section value first\r\n//     setSection(newSection); // Update the section state\r\n  \r\n//     // Fetch students whenever the section changes\r\n//     if (newSection) {\r\n//       fetchStudents(newSection); // Fetch students with the updated section value\r\n//     }\r\n//   };\r\n\r\n//   const handleFetchStudents = () => {\r\n//     if (section) {\r\n//       fetchStudents(section);  // Fetch students when button is clicked\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <h1>Instructor Page</h1>\r\n\r\n//       <label>Enter Section:</label>\r\n//       <input\r\n//         type=\"text\"\r\n//         value={section}\r\n//         onChange={handleSectionChange}\r\n//         placeholder=\"Type section\"\r\n//       />\r\n//       <button onClick={handleFetchStudents}>Fetch Students</button>\r\n\r\n//       <h2>Students in Section {section}</h2>\r\n//       <ul>\r\n//         {students.length > 0 ? (\r\n//           students.map((student, index) => (\r\n//             <li key={index}>\r\n//               {student.studentId} - {student.name} - {student.email} - Team {student.team}\r\n//             </li>\r\n//           ))\r\n//         ) : (\r\n//           <li>No students found for this section.</li>\r\n//         )}\r\n//       </ul>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default InstructorPage;\r\n\r\n\r\n\r\n// InstructorPage.js\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Form, Button, Message, Dropdown } from 'semantic-ui-react';\r\n\r\nconst InstructorPage = ({ instructor }) => {\r\n  // Move all Hook calls to the top level\r\n  const [students, setStudents] = useState([]);\r\n  const [teams, setTeams] = useState([]);\r\n  const [selectedStudents, setSelectedStudents] = useState([]);\r\n  const [teamName, setTeamName] = useState('');\r\n  const [message, setMessage] = useState('');\r\n\r\n  // Update useEffect to check for instructor\r\n  useEffect(() => {\r\n    if (instructor) {\r\n      fetchStudents();\r\n      fetchTeams();\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [instructor]);\r\n\r\n  const fetchStudents = async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `http://localhost:8080/api/instructors/${instructor.section}/students`\r\n      );\r\n      setStudents(response.data);\r\n    } catch (error) {\r\n      console.error('Error fetching students:', error);\r\n    }\r\n  };\r\n\r\n  const fetchTeams = async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `http://localhost:8080/api/instructors/${instructor.section}/teams`\r\n      );\r\n      setTeams(response.data);\r\n    } catch (error) {\r\n      console.error('Error fetching teams:', error);\r\n    }\r\n  };\r\n\r\n  const handleAddTeam = async () => {\r\n    if (!teamName || selectedStudents.length === 0) {\r\n      setMessage('Please enter a team name and select students.');\r\n      return;\r\n    }\r\n\r\n    const team = {\r\n      teamName,\r\n      section: instructor.section,\r\n      studentIds: selectedStudents,\r\n    };\r\n\r\n    try {\r\n      const response = await axios.post(\r\n        `http://localhost:8080/api/instructors/${instructor.section}/teams`,\r\n        team\r\n      );\r\n      setMessage(response.data);\r\n      setTeamName('');\r\n      setSelectedStudents([]);\r\n      fetchTeams();\r\n    } catch (error) {\r\n      console.error('Error adding team:', error);\r\n      setMessage('Failed to add team.');\r\n    }\r\n  };\r\n\r\n  // Move the conditional return AFTER the Hooks\r\n  if (!instructor) {\r\n    return <div>No instructor data available.</div>;\r\n  }\r\n\r\n  // Prepare student options for the dropdown\r\n  const studentOptions = students.map((student) => ({\r\n    key: student.studentId,\r\n    text: `${student.name} (${student.studentId})`,\r\n    value: student.studentId,\r\n  }));\r\n\r\n  return (\r\n    <div>\r\n      <h1>Welcome, {instructor.name}!</h1>\r\n      <h2>Section: {instructor.section}</h2>\r\n\r\n      <h3>Add a Team</h3>\r\n      <Form>\r\n        <Form.Field>\r\n          <label>Team Name</label>\r\n          <input\r\n            placeholder=\"Enter Team Name\"\r\n            value={teamName}\r\n            onChange={(e) => setTeamName(e.target.value)}\r\n          />\r\n        </Form.Field>\r\n        <Form.Field>\r\n          <label>Select Students</label>\r\n          <Dropdown\r\n            placeholder=\"Select Students\"\r\n            fluid\r\n            multiple\r\n            selection\r\n            options={studentOptions}\r\n            value={selectedStudents}\r\n            onChange={(e, { value }) => setSelectedStudents(value)}\r\n          />\r\n        </Form.Field>\r\n        <Button onClick={handleAddTeam}>Add Team</Button>\r\n      </Form>\r\n\r\n      {message && <Message content={message} />}\r\n\r\n      <h3>Teams</h3>\r\n      <ul>\r\n        {teams.map((team, index) => (\r\n          <li key={index}>\r\n            <strong>{team.teamName}</strong>: {team.studentIds.join(', ')}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n      <h3>All Students in Section {instructor.section}</h3>\r\n      <ul>\r\n        {students.map((student, index) => (\r\n          <li key={index}>\r\n            {student.studentId} - {student.name} - {student.email}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InstructorPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}