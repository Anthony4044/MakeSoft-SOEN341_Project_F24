{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { Form, Button, Message, List } from 'semantic-ui-react';\n\n// const InstructorPage = () => {\n//   const [teamName, setTeamName] = useState('');\n//   const [section, setSection] = useState('');\n//   const [studentIds, setStudentIds] = useState('');\n//   const [message, setMessage] = useState('');\n//   const [students, setStudents] = useState([]); // Changed from teams to students for clarity\n\n//   // Function to create a team\n//   const createTeam = async () => {\n//     try {\n//       const response = await axios.post('http://localhost:8080/api/teams/create', {\n//         teamName,\n//         section,\n//         studentIds: studentIds.split(','), // Split by comma for multiple students\n//       });\n//       setMessage(response.data);\n//       fetchStudentsBySection(section); // Refresh students list\n//     } catch (error) {\n//       console.error(error);\n//       setMessage('Failed to create team.');\n//     }\n//   };\n\n//   // Function to fetch students by section\n//   const fetchStudentsBySection = async (section) => {\n//     try {\n//       // Make a request to the backend to get the list of students by section\n//       const response = await axios.get(`http://localhost:8080/api/instructors/${section}/students`);\n\n//       // Assuming the response data contains the list of students\n//       setStudents(response.data); // Changed from setTeams to setStudents\n//     } catch (error) {\n//       console.error('Error fetching students by section:', error);\n//     }\n//   };\n\n//   useEffect(() => {\n//     if (section) {\n//       fetchStudentsBySection(section);\n//     }\n//   }, [section]);\n\n//   return (\n//     <div>\n//       <h1>Instructor Page</h1>\n//       <Form>\n//         <Form.Field>\n//           <label>Team Name</label>\n//           <input placeholder=\"Enter Team Name\" value={teamName} onChange={(e) => setTeamName(e.target.value)} />\n//         </Form.Field>\n//         <Form.Field>\n//           <label>Section</label>\n//           <input placeholder=\"Enter Section\" value={section} onChange={(e) => setSection(e.target.value)} />\n//         </Form.Field>\n//         <Form.Field>\n//           <label>Student IDs (comma separated)</label>\n//           <input placeholder=\"Enter Student IDs\" value={studentIds} onChange={(e) => setStudentIds(e.target.value)} />\n//         </Form.Field>\n//         <Button onClick={createTeam}>Create Team</Button>\n//       </Form>\n\n//       {message && <Message content={message} />}\n\n//       <h1>Students in Section {section}</h1>\n//       <ul>\n//         {students.map((student, index) => (\n//           <li key={index}>\n//             {student.name} - {student.email} - Team {student.team}\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\nconst express = require('express');\nconst fs = require('fs');\nconst csv = require('csv-parser');\nconst app = express();\nconst PORT = 8080;\n\n// Endpoint to get students by section\napp.get('/api/instructors/:section/students', (req, res) => {\n  const section = req.params.section;\n  const students = [];\n  fs.createReadStream('path/to/your/CSV-files/students.csv') // Update path\n  .pipe(csv()).on('data', row => {\n    if (row.section === section) {\n      students.push(row); // Add student to array if section matches\n    }\n  }).on('end', () => {\n    res.json(students); // Send filtered students as response\n  }).on('error', error => {\n    console.error('Error reading CSV file:', error);\n    res.status(500).send('Error reading data.');\n  });\n});\napp.listen(PORT, () => {\n  console.log(`Server is running on http://localhost:${PORT}`);\n});","map":{"version":3,"names":["express","require","fs","csv","app","PORT","get","req","res","section","params","students","createReadStream","pipe","on","row","push","json","error","console","status","send","listen","log"],"sources":["C:/Users/ozmar/OneDrive/Documents/GitHub/MakeSoft-SOEN341_Project_F24/MakeSoftReact/makesoftreact/src/instructorPage.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import { Form, Button, Message, List } from 'semantic-ui-react';\r\n\r\n// const InstructorPage = () => {\r\n//   const [teamName, setTeamName] = useState('');\r\n//   const [section, setSection] = useState('');\r\n//   const [studentIds, setStudentIds] = useState('');\r\n//   const [message, setMessage] = useState('');\r\n//   const [students, setStudents] = useState([]); // Changed from teams to students for clarity\r\n\r\n//   // Function to create a team\r\n//   const createTeam = async () => {\r\n//     try {\r\n//       const response = await axios.post('http://localhost:8080/api/teams/create', {\r\n//         teamName,\r\n//         section,\r\n//         studentIds: studentIds.split(','), // Split by comma for multiple students\r\n//       });\r\n//       setMessage(response.data);\r\n//       fetchStudentsBySection(section); // Refresh students list\r\n//     } catch (error) {\r\n//       console.error(error);\r\n//       setMessage('Failed to create team.');\r\n//     }\r\n//   };\r\n\r\n//   // Function to fetch students by section\r\n//   const fetchStudentsBySection = async (section) => {\r\n//     try {\r\n//       // Make a request to the backend to get the list of students by section\r\n//       const response = await axios.get(`http://localhost:8080/api/instructors/${section}/students`);\r\n      \r\n//       // Assuming the response data contains the list of students\r\n//       setStudents(response.data); // Changed from setTeams to setStudents\r\n//     } catch (error) {\r\n//       console.error('Error fetching students by section:', error);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     if (section) {\r\n//       fetchStudentsBySection(section);\r\n//     }\r\n//   }, [section]);\r\n\r\n//   return (\r\n//     <div>\r\n//       <h1>Instructor Page</h1>\r\n//       <Form>\r\n//         <Form.Field>\r\n//           <label>Team Name</label>\r\n//           <input placeholder=\"Enter Team Name\" value={teamName} onChange={(e) => setTeamName(e.target.value)} />\r\n//         </Form.Field>\r\n//         <Form.Field>\r\n//           <label>Section</label>\r\n//           <input placeholder=\"Enter Section\" value={section} onChange={(e) => setSection(e.target.value)} />\r\n//         </Form.Field>\r\n//         <Form.Field>\r\n//           <label>Student IDs (comma separated)</label>\r\n//           <input placeholder=\"Enter Student IDs\" value={studentIds} onChange={(e) => setStudentIds(e.target.value)} />\r\n//         </Form.Field>\r\n//         <Button onClick={createTeam}>Create Team</Button>\r\n//       </Form>\r\n\r\n//       {message && <Message content={message} />}\r\n\r\n//       <h1>Students in Section {section}</h1>\r\n//       <ul>\r\n//         {students.map((student, index) => (\r\n//           <li key={index}>\r\n//             {student.name} - {student.email} - Team {student.team}\r\n//           </li>\r\n//         ))}\r\n//       </ul>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\nconst express = require('express');\r\nconst fs = require('fs');\r\nconst csv = require('csv-parser');\r\n\r\nconst app = express();\r\nconst PORT = 8080;\r\n\r\n// Endpoint to get students by section\r\napp.get('/api/instructors/:section/students', (req, res) => {\r\n  const section = req.params.section;\r\n  const students = [];\r\n\r\n  fs.createReadStream('path/to/your/CSV-files/students.csv') // Update path\r\n    .pipe(csv())\r\n    .on('data', (row) => {\r\n      if (row.section === section) {\r\n        students.push(row); // Add student to array if section matches\r\n      }\r\n    })\r\n    .on('end', () => {\r\n      res.json(students); // Send filtered students as response\r\n    })\r\n    .on('error', (error) => {\r\n      console.error('Error reading CSV file:', error);\r\n      res.status(500).send('Error reading data.');\r\n    });\r\n});\r\n\r\napp.listen(PORT, () => {\r\n  console.log(`Server is running on http://localhost:${PORT}`);\r\n});"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAI,CAAC;AACxB,MAAME,GAAG,GAAGF,OAAO,CAAC,YAAY,CAAC;AAEjC,MAAMG,GAAG,GAAGJ,OAAO,CAAC,CAAC;AACrB,MAAMK,IAAI,GAAG,IAAI;;AAEjB;AACAD,GAAG,CAACE,GAAG,CAAC,oCAAoC,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EAC1D,MAAMC,OAAO,GAAGF,GAAG,CAACG,MAAM,CAACD,OAAO;EAClC,MAAME,QAAQ,GAAG,EAAE;EAEnBT,EAAE,CAACU,gBAAgB,CAAC,qCAAqC,CAAC,CAAC;EAAA,CACxDC,IAAI,CAACV,GAAG,CAAC,CAAC,CAAC,CACXW,EAAE,CAAC,MAAM,EAAGC,GAAG,IAAK;IACnB,IAAIA,GAAG,CAACN,OAAO,KAAKA,OAAO,EAAE;MAC3BE,QAAQ,CAACK,IAAI,CAACD,GAAG,CAAC,CAAC,CAAC;IACtB;EACF,CAAC,CAAC,CACDD,EAAE,CAAC,KAAK,EAAE,MAAM;IACfN,GAAG,CAACS,IAAI,CAACN,QAAQ,CAAC,CAAC,CAAC;EACtB,CAAC,CAAC,CACDG,EAAE,CAAC,OAAO,EAAGI,KAAK,IAAK;IACtBC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/CV,GAAG,CAACY,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,qBAAqB,CAAC;EAC7C,CAAC,CAAC;AACN,CAAC,CAAC;AAEFjB,GAAG,CAACkB,MAAM,CAACjB,IAAI,EAAE,MAAM;EACrBc,OAAO,CAACI,GAAG,CAAC,yCAAyClB,IAAI,EAAE,CAAC;AAC9D,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}