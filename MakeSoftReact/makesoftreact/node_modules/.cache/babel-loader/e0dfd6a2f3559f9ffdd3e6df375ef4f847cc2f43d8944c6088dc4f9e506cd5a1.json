{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ozmar\\\\OneDrive\\\\Documents\\\\GitHub\\\\MakeSoft-SOEN341_Project_F24\\\\MakeSoftReact\\\\makesoftreact\\\\src\\\\instructorPage.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { Form, Button, Message, List } from 'semantic-ui-react';\n\n// const InstructorPage = () => {\n//   const [teamName, setTeamName] = useState('');\n//   const [section, setSection] = useState('');\n//   const [studentIds, setStudentIds] = useState('');\n//   const [message, setMessage] = useState('');\n//   const [students, setStudents] = useState([]); // Changed from teams to students for clarity\n\n//   // Function to create a team\n//   const createTeam = async () => {\n//     try {\n//       const response = await axios.post('http://localhost:8080/api/teams/create', {\n//         teamName,\n//         section,\n//         studentIds: studentIds.split(','), // Split by comma for multiple students\n//       });\n//       setMessage(response.data);\n//       fetchStudentsBySection(section); // Refresh students list\n//     } catch (error) {\n//       console.error(error);\n//       setMessage('Failed to create team.');\n//     }\n//   };\n\n//   // Function to fetch students by section\n//   const fetchStudentsBySection = async (section) => {\n//     try {\n//       // Make a request to the backend to get the list of students by section\n//       const response = await axios.get(`http://localhost:8080/api/instructors/${section}/students`);\n\n//       // Assuming the response data contains the list of students\n//       setStudents(response.data); // Changed from setTeams to setStudents\n//     } catch (error) {\n//       console.error('Error fetching students by section:', error);\n//     }\n//   };\n\n//   useEffect(() => {\n//     if (section) {\n//       fetchStudentsBySection(section);\n//     }\n//   }, [section]);\n\n//   return (\n//     <div>\n//       <h1>Instructor Page</h1>\n//       <Form>\n//         <Form.Field>\n//           <label>Team Name</label>\n//           <input placeholder=\"Enter Team Name\" value={teamName} onChange={(e) => setTeamName(e.target.value)} />\n//         </Form.Field>\n//         <Form.Field>\n//           <label>Section</label>\n//           <input placeholder=\"Enter Section\" value={section} onChange={(e) => setSection(e.target.value)} />\n//         </Form.Field>\n//         <Form.Field>\n//           <label>Student IDs (comma separated)</label>\n//           <input placeholder=\"Enter Student IDs\" value={studentIds} onChange={(e) => setStudentIds(e.target.value)} />\n//         </Form.Field>\n//         <Button onClick={createTeam}>Create Team</Button>\n//       </Form>\n\n//       {message && <Message content={message} />}\n\n//       <h1>Students in Section {section}</h1>\n//       <ul>\n//         {students.map((student, index) => (\n//           <li key={index}>\n//             {student.name} - {student.email} - Team {student.team}\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InstructorPage = () => {\n  _s();\n  const [section, setSection] = useState(''); // Section input state\n  const [students, setStudents] = useState([]);\n\n  // Fetch students for the entered section\n  const fetchStudents = async section => {\n    try {\n      const response = await axios.get(`http://localhost:8080/api/instructors/${section}/students`);\n      setStudents(response.data);\n    } catch (error) {\n      console.error('Error fetching students:', error);\n    }\n  };\n  const handleSectionChange = e => {\n    fetchStudents(section);\n    setSection(e.target.value); // Update section state as user types\n  };\n  const handleFetchStudents = () => {\n    if (section) {\n      fetchStudents(section); // Fetch students when button is clicked\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Instructor Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Enter Section:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: section,\n      onChange: handleSectionChange,\n      placeholder: \"Type section\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleFetchStudents,\n      children: \"Fetch Students\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Students in Section \", section]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: students.length > 0 ? students.map((student, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [student.studentId, \" - \", student.name, \" - \", student.email, \" - Team \", student.team]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"No students found for this section.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n_s(InstructorPage, \"7SpTTGePHB4LCfhD03Uaf17vYlw=\");\n_c = InstructorPage;\nexport default InstructorPage;\nvar _c;\n$RefreshReg$(_c, \"InstructorPage\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","InstructorPage","_s","section","setSection","students","setStudents","fetchStudents","response","get","data","error","console","handleSectionChange","e","target","value","handleFetchStudents","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","onClick","length","map","student","index","studentId","name","email","team","_c","$RefreshReg$"],"sources":["C:/Users/ozmar/OneDrive/Documents/GitHub/MakeSoft-SOEN341_Project_F24/MakeSoftReact/makesoftreact/src/instructorPage.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import { Form, Button, Message, List } from 'semantic-ui-react';\r\n\r\n// const InstructorPage = () => {\r\n//   const [teamName, setTeamName] = useState('');\r\n//   const [section, setSection] = useState('');\r\n//   const [studentIds, setStudentIds] = useState('');\r\n//   const [message, setMessage] = useState('');\r\n//   const [students, setStudents] = useState([]); // Changed from teams to students for clarity\r\n\r\n//   // Function to create a team\r\n//   const createTeam = async () => {\r\n//     try {\r\n//       const response = await axios.post('http://localhost:8080/api/teams/create', {\r\n//         teamName,\r\n//         section,\r\n//         studentIds: studentIds.split(','), // Split by comma for multiple students\r\n//       });\r\n//       setMessage(response.data);\r\n//       fetchStudentsBySection(section); // Refresh students list\r\n//     } catch (error) {\r\n//       console.error(error);\r\n//       setMessage('Failed to create team.');\r\n//     }\r\n//   };\r\n\r\n//   // Function to fetch students by section\r\n//   const fetchStudentsBySection = async (section) => {\r\n//     try {\r\n//       // Make a request to the backend to get the list of students by section\r\n//       const response = await axios.get(`http://localhost:8080/api/instructors/${section}/students`);\r\n      \r\n//       // Assuming the response data contains the list of students\r\n//       setStudents(response.data); // Changed from setTeams to setStudents\r\n//     } catch (error) {\r\n//       console.error('Error fetching students by section:', error);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     if (section) {\r\n//       fetchStudentsBySection(section);\r\n//     }\r\n//   }, [section]);\r\n\r\n//   return (\r\n//     <div>\r\n//       <h1>Instructor Page</h1>\r\n//       <Form>\r\n//         <Form.Field>\r\n//           <label>Team Name</label>\r\n//           <input placeholder=\"Enter Team Name\" value={teamName} onChange={(e) => setTeamName(e.target.value)} />\r\n//         </Form.Field>\r\n//         <Form.Field>\r\n//           <label>Section</label>\r\n//           <input placeholder=\"Enter Section\" value={section} onChange={(e) => setSection(e.target.value)} />\r\n//         </Form.Field>\r\n//         <Form.Field>\r\n//           <label>Student IDs (comma separated)</label>\r\n//           <input placeholder=\"Enter Student IDs\" value={studentIds} onChange={(e) => setStudentIds(e.target.value)} />\r\n//         </Form.Field>\r\n//         <Button onClick={createTeam}>Create Team</Button>\r\n//       </Form>\r\n\r\n//       {message && <Message content={message} />}\r\n\r\n//       <h1>Students in Section {section}</h1>\r\n//       <ul>\r\n//         {students.map((student, index) => (\r\n//           <li key={index}>\r\n//             {student.name} - {student.email} - Team {student.team}\r\n//           </li>\r\n//         ))}\r\n//       </ul>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst InstructorPage = () => {\r\n  const [section, setSection] = useState('');  // Section input state\r\n  const [students, setStudents] = useState([]);\r\n\r\n  // Fetch students for the entered section\r\n  const fetchStudents = async (section) => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:8080/api/instructors/${section}/students`);\r\n      setStudents(response.data);\r\n    } catch (error) {\r\n      console.error('Error fetching students:', error);\r\n    }\r\n  };\r\n\r\n  const handleSectionChange = (e) => {\r\n    fetchStudents(section);\r\n    setSection(e.target.value);  // Update section state as user types\r\n    \r\n  };\r\n\r\n  const handleFetchStudents = () => {\r\n    if (section) {\r\n      fetchStudents(section);  // Fetch students when button is clicked\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Instructor Page</h1>\r\n\r\n      <label>Enter Section:</label>\r\n      <input\r\n        type=\"text\"\r\n        value={section}\r\n        onChange={handleSectionChange}\r\n        placeholder=\"Type section\"\r\n      />\r\n      <button onClick={handleFetchStudents}>Fetch Students</button>\r\n\r\n      <h2>Students in Section {section}</h2>\r\n      <ul>\r\n        {students.length > 0 ? (\r\n          students.map((student, index) => (\r\n            <li key={index}>\r\n              {student.studentId} - {student.name} - {student.email} - Team {student.team}\r\n            </li>\r\n          ))\r\n        ) : (\r\n          <li>No students found for this section.</li>\r\n        )}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InstructorPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}